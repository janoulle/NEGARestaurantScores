// https://docs.gradle.org/current/userguide/multi_project_builds.html#sec:subproject_configuration
subprojects {
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'war'
    apply plugin: 'eclipse'
    apply plugin: 'jacoco'


    buildscript {
        ext {
            targetCompatibility = 1.8
            sourceCompatibility = 1.8
            springBootVersion = '2.0.3.RELEASE'
        }
        repositories {
            jcenter()
            maven { url "https://plugins.gradle.org/m2/" }
        }
        dependencies {
            //https://plugins.gradle.org/plugin/org.springframework.boot
            classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")

            //https://plugins.gradle.org/plugin/com.palantir.docker
            classpath "gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.19.2"

            //https://plugins.gradle.org/plugin/org.sonarqube
            classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2"

        }
    }

    //intellij generates this out directory when running tests with coverage and need to clean this out
    clean {
        delete "$projectDir/out"
    }

    //https://docs.gradle.org/current/userguide/build_lifecycle.html
    afterEvaluate {

        //https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/html/#packaging-executable-wars
        //https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/html/#packaging-executable-jars
        [bootJar, bootWar].each {
            manifest {
                attributes(
                        'Implementation-Title':   "$projectName",
                        'Implementation-Version': "$projectVersionId-$projectVersionType")
            }
        }

    }

    //https://docs.spring.io/spring-boot/docs/1.0.0.RELEASE/reference/html/build-tool-plugins-gradle-plugin.html
    //bootRepackage.withJarTask = jar

    //https://docs.gradle.org/4.6/userguide/userguide_single.html#sec:java_test
    //https://docs.gradle.org/4.6/dsl/org.gradle.api.tasks.testing.logging.TestLoggingContainer.html
    //http://mrhaki.blogspot.com/2013/05/gradle-goodness-show-more-information.html
    test {
        debug false

        testLogging {
            exceptionFormat "full"
        }

    }

    //https://devcenter.heroku.com/articles/deploying-gradle-apps-on-heroku
    //https://stackoverflow.com/questions/41532108/run-clean-task-before-every-build-automatically-in-gradle
    build.dependsOn clean

    // https://discuss.gradle.org/t/jacoco-no-subproject-coverage/21451
    // https://gist.github.com/aalmiray/e6f54aa4b3803be0bcac

}

gradle.afterProject {project, projectState ->
    if (projectState.failure) {
        println "Evaluation of $project FAILED"
    } else {
        println "Evaluation of $project succeeded"
    }
}