buildscript {
    ext {
        springBootVersion = '1.5.12.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.0.RC2"
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'se.transmode.gradle:gradle-docker:1.2'
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: "io.spring.dependency-management"
apply plugin: 'docker'
//apply plugin: 'war'

//https://stackoverflow.com/questions/17262856/gradle-how-to-set-the-project-name-group-version-plus-source-targetcompatibi
group = projectGroup
version = projectVersion
sourceCompatibility = projectSourceCompatibility

repositories {
    mavenCentral()
}

configurations.all {
    exclude group: "commons-logging", module: "commons-logging"
}

configurations {
    providedRuntime
}

dependencyManagement {
    imports {
        //https://github.com/awsdocs/aws-doc-sdk-examples
        mavenBom 'com.amazonaws:aws-java-sdk-bom:1.11.228'
    }
}


dependencies {

    //2. bridge logging from JCL to SLF4j
    compile 'org.slf4j:jcl-over-slf4j:1.7.12'

    //3. Logback
    compile 'ch.qos.logback:logback-classic:1.2.3'
    //for processing conditionals in logback - https://logback.qos.ch/setup.html#janino
    compile 'org.codehaus.janino:janino:3.0.6'

    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('com.h2database:h2')
    compile('postgresql:postgresql:9.0-801.jdbc4')
    compile('mysql:mysql-connector-java:6.0.4')
    compile('org.xerial:sqlite-jdbc:3.16.1')
    compile('javax.inject:javax.inject:1')
    compileOnly "org.projectlombok:lombok:1.16.16"
    compile("org.springframework.boot:spring-boot-starter-cache")
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-data-rest')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('com.google.guava:guava:19.0')
    compile('joda-time:joda-time:2.9.4')
    compile('org.apache.commons:commons-lang3:3.4')
    compile('org.jsoup:jsoup:1.9.2')
    compile('commons-io:commons-io:2.4')

    //https://firebase.google.com/support/release-notes/admin/java
    compile 'com.google.firebase:firebase-admin:4.1.6'
    compile 'com.amazonaws:aws-java-sdk-s3'
    compile 'com.amazonaws:aws-java-sdk-ec2'
    compile 'com.amazonaws:aws-java-sdk-dynamodb'
    compile group: 'org.apache.commons', name: 'commons-csv', version: '1.4'
    // https://mvnrepository.com/artifact/org.apache.commons/commons-collections4
    compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.1'
    compile 'org.elasticsearch.client:elasticsearch-rest-client-sniffer:5.6.1'

    compile("org.springframework.boot:spring-boot-devtools")
    //compile("org.liquibase:liquibase-core:3.4.1")
    // https://mvnrepository.com/artifact/org.yaml/snakeyaml
    //compile group: 'org.yaml', name: 'snakeyaml', version: '1.18'

    //https://intellij-support.jetbrains.com/hc/en-us/community/posts/206670989-Spring-Boot-app-shuts-down-automatically
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

    testCompile('org.springframework.boot:spring-boot-starter-test')
}


/*docker {
    dependsOn build
    name "${project.group}/${bootJar.baseName}"
    files bootJar.archivePath
    buildArgs(['JAR_FILE': "${bootJar.archiveName}"])
}*/

docker {
    maintainer = 'Jane Ullah <janeullah@gmail.com>'
    baseImage = 'openjdk:8-jdk-alpine'
}

task fooDocker(type: Docker) {
    applicationName = "$rootProject.name"
    tagVersion = '1.0'
}

task nginxDocker(type: Docker) {
    applicationName = "nginx"
    runCommand 'echo "deb http://archive.ubuntu.com/ubuntu precise main universe" > /etc/apt/sources.list'
    runCommand "apt-get update"
    runCommand "apt-get install -y inotify-tools nginx apache2 openssh-server"
}

task image(type: Docker, dependsOn: build ) {
    project.group = ''
    applicationName = "restaurantscores-server"
    dockerfile = file('Dockerfile')
    tagVersion = 'latest'
    doFirst {
        copy {
            from jar
            into "${stageDir}/target"
        }
    }
}

task publishImage(type: Docker, dependsOn: build ) {
    project.group = ''
    applicationName = "restaurantscores-server"
    push = true
    dockerfile = file('Dockerfile')
    tagVersion = 'latest'
    doFirst {
        copy {
            from jar
            into "${stageDir}/target"
        }
    }
}