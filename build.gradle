buildscript {
    ext {
        springBootVersion = '1.5.12.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.0.RC2"
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'se.transmode.gradle:gradle-docker:1.2'
    }
}

apply plugin: 'java'
//apply plugin: 'war'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: "io.spring.dependency-management"
apply plugin: 'docker'

//https://stackoverflow.com/questions/17262856/gradle-how-to-set-the-project-name-group-version-plus-source-targetcompatibi
group = projectGroup
version = projectVersion
sourceCompatibility = projectSourceCompatibility

repositories {
    mavenCentral()
}

configurations.all {
    exclude group: "commons-logging", module: "commons-logging"
}

configurations {
    providedRuntime
}

dependencyManagement {
    imports {
        //https://github.com/awsdocs/aws-doc-sdk-examples
        mavenBom 'com.amazonaws:aws-java-sdk-bom:1.11.228'
    }
}

/*http://mrhaki.blogspot.com/2009/10/groovy-goodness-executing-string-or.html
  http://mrhaki.blogspot.com/2010/10/gradle-goodness-parse-output-from-exec.html */
static String executeCmd(String cmd) {
    def command = cmd?.execute()

    return command?.text?.trim()
}

//https://stackoverflow.com/questions/11657295/count-the-number-of-commits-on-a-git-branch
//https://stackoverflow.com/questions/15798862/what-does-git-rev-parse-do
def getBuildInfo() {

    String lastCommitId = executeCmd("git rev-parse HEAD")
    String tag = executeCmd("git name-rev --tags --name-only $lastCommitId")

    def buildInfo = [
            'Main-Class' : 'com.janeullah.healthinspectionrecords.RestaurantScoresApplication',
            'Implementation-Title'       : projectName,
            'Implementation-Version'     : projectVersion,
            'Build-Target'               : projectVersion.substring(projectVersion.indexOf("-") + 1),
            'Build-Time'                 : new Date().format("YYYY-MM-dd"),
            'Git-Branch'                 : executeCmd("git rev-parse --abbrev-ref HEAD"),
            'Git-Branch-Commit-Count'    : executeCmd("git rev-list --count HEAD"),
            'Git-Last-Commit-Id'         : lastCommitId,
            'Git-Branch-Tag'             : tag == 'undefined' ? 'None' : tag,
            'Gradle-Version'             : GradleVersion.current().getVersion(),
            'Java-Version'               : org.gradle.internal.jvm.Jvm.current()
    ]

    buildInfo
}

/*https://stackoverflow.com/questions/8012048/groovy-write-out-the-list-to-a-file
https://docs.gradle.org/current/userguide/tutorial_using_tasks.html#sec:using_methods */
task writeBuildInfo (dependsOn: build) {
    doLast {
        def buildInfo = getBuildInfo()

        String outputPath = "${projectDir}/build.info"
        File file = new File(outputPath)
        file.withWriter{ out ->
            buildInfo.each {k, v -> out.println "${k}:${v}"}
        }
    }
}

dependencies {

    //2. bridge logging from JCL to SLF4j
    compile 'org.slf4j:jcl-over-slf4j:1.7.12'

    //3. Logback
    compile 'ch.qos.logback:logback-classic:1.2.3'
    //for processing conditionals in logback - https://logback.qos.ch/setup.html#janino
    compile 'org.codehaus.janino:janino:3.0.6'

    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('com.h2database:h2')
    compile('postgresql:postgresql:9.0-801.jdbc4')
    compile('mysql:mysql-connector-java:6.0.4')
    compile('org.xerial:sqlite-jdbc:3.16.1')
    compile('javax.inject:javax.inject:1')
    compileOnly "org.projectlombok:lombok:1.16.16"
    compile("org.springframework.boot:spring-boot-starter-cache")
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-data-rest')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('com.google.guava:guava:19.0')
    compile('joda-time:joda-time:2.9.4')
    compile('org.apache.commons:commons-lang3:3.4')
    compile('org.jsoup:jsoup:1.9.2')
    compile('commons-io:commons-io:2.4')

    //https://firebase.google.com/support/release-notes/admin/java
    compile 'com.google.firebase:firebase-admin:4.1.6'
    compile 'com.amazonaws:aws-java-sdk-s3'
    compile 'com.amazonaws:aws-java-sdk-ec2'
    compile 'com.amazonaws:aws-java-sdk-dynamodb'
    compile group: 'org.apache.commons', name: 'commons-csv', version: '1.4'
    // https://mvnrepository.com/artifact/org.apache.commons/commons-collections4
    compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.1'
    compile 'org.elasticsearch.client:elasticsearch-rest-client-sniffer:5.6.1'

    compile("org.springframework.boot:spring-boot-devtools")
    //compile("org.liquibase:liquibase-core:3.4.1")
    // https://mvnrepository.com/artifact/org.yaml/snakeyaml
    //compile group: 'org.yaml', name: 'snakeyaml', version: '1.18'

    //https://intellij-support.jetbrains.com/hc/en-us/community/posts/206670989-Spring-Boot-app-shuts-down-automatically
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

    testCompile('org.springframework.boot:spring-boot-starter-test')
}

docker {
    maintainer = 'Jane Ullah <janeullah@gmail.com>'
    baseImage = 'openjdk:8-jdk-alpine'
}


task nginxDocker(type: Docker) {
    applicationName = "nginx"
    runCommand 'echo "deb http://archive.ubuntu.com/ubuntu precise main universe" > /etc/apt/sources.list'
    runCommand "apt-get update"
    runCommand "apt-get install -y inotify-tools nginx apache2 openssh-server"
}

//https://github.com/Transmode/gradle-docker/issues/29 this plugin only works when Dockerfile is not 'external' :(
task image(type: Docker, dependsOn: ['clean', 'build'] ) {
    //setup name of image
    project.group = ''
    applicationName = 'restaurantscores-server'
    tagVersion = 'latest'

    //cmds to run
    def args = ["java", "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000", "-Djava.security.egd=file:/dev/./urandom -jar", "/app.jar"]

    //setup dockerfile data

    workingDir "../.."

    runCommand "apk add --no-cache curl"

    addFile "build/libs/RestaurantScores-0.0.1-SNAPSHOT.jar", "app.jar"

    setEnvironment "JAVA_OPTS", "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000"

    setEnvironment "PORT", "8080"

    setEnvironment "CATALINA_HOME", "/usr/local/tomcat"

    setEnvironment "SPRING_PROFILES_ACTIVE", "postgresql"

    exposePort 8000

    exposePort 8080

    volume "/usr/local/tomcat/logs", "/usr/local/tomcat/downloads/webpages"

    defaultCommand args

}


//https://github.com/Transmode/gradle-docker/issues/29 this plugin only works when Dockerfile is not 'external' :(
//TODO: figure out how to make this generate the following docker build command - docker build -t restaurantscores-server:latest -f docker\restaurantscores-server\Dockerfile .
// atm, it generates docker build -t restaurantscores-server:latest /path/to/dockerfoldercontext which causes build issues :(
task imageB(type: Docker, dependsOn: ['clean', 'build'] ) {
    project.group = ''
    applicationName = "restaurantscores-server"
    dockerfile = file("docker/$applicationName/Dockerfile")
    tagVersion = 'latest'
    doFirst {
        copy {
            from jar
            into "${stageDir}/target"
        }
    }
}


task publishImage(type: Docker, dependsOn: ['clean', 'build'] ) {
    project.group = ''
    applicationName = "restaurantscores-server"
    push = true
    dockerfile = file("docker/$applicationName/Dockerfile")
    tagVersion = 'latest'
    doFirst {
        copy {
            from jar
            into "${stageDir}/target"
        }
    }
}

//https://devcenter.heroku.com/articles/deploying-gradle-apps-on-heroku
//https://stackoverflow.com/questions/41532108/run-clean-task-before-every-build-automatically-in-gradle
build.dependsOn clean
